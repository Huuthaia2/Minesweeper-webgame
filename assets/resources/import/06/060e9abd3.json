[1,["fdoJXLgx1GAa2UhGATlj3o","20g1ukYUVPvKWKBRznAKo+@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","20g1ukYUVPvKWKBRznAKo+@6c48a","7dj5uJT9FMn6OrOOx83tfK@f9941","93hGlmaUlAW74hmECVckDk@f9941","40JZr07iZP6Lkpy3i8/lyM@f9941","40JZr07iZP6Lkpy3i8/lyM@6c48a","54TknWPwVPqJqeCR+Y/Czo@6c48a","93hGlmaUlAW74hmECVckDk@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","609xlc7CpF67qUiVX2DoHQ"],["node","_customMaterial","_textureSource","_spriteFrame","_target","_parent","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","root","logoLabel","windowSp","contextLabel","disAgreeLabel","agreeLabel","headLabel","data","_effectAsset"],[["cc.Node",["_name","_layer","_objFlags","_components","_prefab","_children","_lpos","_parent","_lscale"],0,9,4,2,5,1,5],"cc.SpriteFrame",["cc.Sprite",["_name","_sizeMode","_type","node","__prefab","_customMaterial","_spriteFrame","_color"],0,1,4,6,6,5],["cc.Label",["_name","_string","_actualFontSize","_lineHeight","_underlineHeight","_cacheMode","_fontFamily","_enableWrapText","_fontSize","node","__prefab","_color"],-6,1,4,5],["cc.Node",["_name","_objFlags","_layer","_parent","_components","_prefab","_lpos"],0,1,12,4,5],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","_alignMode","node","__prefab"],-1,1,4],["cc.Button",["_transition","node","__prefab","clickEvents","_hoverColor","_pressedColor","_target","_normalColor","_disabledColor","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,4,9,5,5,1,5,5,6,6,6,6],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["1d2dcZugyBBDYZh4z+IqPN7",["node","__prefab","headLabel","agreeLabel","disAgreeLabel","contextLabel","windowSp","logoLabel"],3,1,4,1,1,1,1,1,1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.RichText",["_lineHeight","_string","_fontSize","_fontFamily","node","__prefab"],-1,1,4],["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1],["cc.Material",["_props","_defines"],1]],[[9,0,2],[10,0,1,2,1],[12,0,1,2,2],[5,1,2,1],[14,0,1,2,3],[4,0,1,2,3,4,5,6,4],[0,0,2,1,5,3,4,4],[0,0,2,1,7,3,4,6,4],[4,0,1,2,3,4,5,4],[6,0,1,2,3,4,5,5],[7,0,1,2,3,7,4,5,8,6,9,10,11,12,2],[7,1,2,3,4,5,6,1],[8,0,2],[0,0,1,5,3,4,6,3],[0,0,2,1,7,3,4,4],[0,0,2,1,7,5,3,4,6,8,4],[0,0,2,1,7,5,3,4,6,4],[5,0,1,2,2],[11,0,1,2,3,4,5,6,7,1],[2,0,3,4,5,6,2],[2,0,1,3,4,7,5,6,3],[2,0,2,1,3,4,4],[6,0,1,2,4,5,4],[13,0,1,1],[3,0,1,2,8,3,4,5,9,10,11,8],[3,0,1,2,6,3,7,4,5,9,10,9],[3,0,1,2,6,3,7,4,9,10,11,8],[15,0,1,2,3,4,5,5],[16,0,1,2,3,5],[17,0,1,3]],[[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[1],0,[0],[2],[4]],[[[12,"AAPMainView"],[13,"AAPMainView",33554432,[-11,-12,-13,-14,-15,-16,-17,-18],[[3,-2,[0,"0fMXI1PYBN1IcnF6kBRj5k"]],[1,-3,[0,"084HwQkVxMz4DBMjZ0LMfs"],[5,720,1280]],[18,-10,[0,"eeoW53enJIv4W+Xb3F/98R"],-9,-8,-7,-6,-5,-4]],[2,"f3X7vWC0dIxapZXtyfWJ4J",-1,0],[1,360,640,0]],[6,"Background",512,33554432,[-23],[[19,"Background<Sprite>",-19,[0,"fchb+Xzg5F17v4S5WwU5AA"],2,3],[9,45,100,40,0,-20,[0,"17Nf1dY2RCt6INJu6kwr3n"]],[3,-21,[0,"91p5Jz7pNCIqOIvNmAIJFt"]],[1,-22,[0,"d978sIFsVHVrbPnnEwRjfB"],[5,428,76]]],[2,"14HPPiUeRPxo6J1mepGEMo",1,0]],[14,"bg",512,33554432,1,[[20,"bg<Sprite>",0,-24,[0,"194P7F6A5C8LZIcUDvLSvr"],[4,4278190080],0,1],[23,-25,[0,"38ary0oPhNB6hLSwD99MQA"]],[22,45,720,1280,-26,[0,"bdckYEY55Jn4FVT9ExljMR"]],[17,200,-27,[0,"34WKr8lQ9P46J5VNrfh3IL"]],[1,-28,[0,"06z+MWEY5KbbNXW3+OJFTA"],[5,720,1280]]],[2,"40mTefE/VMFo7ZajZXjw5n",1,0]],[6,"Background",512,33554432,[-32],[[9,45,100,40,0,-29,[0,"bcKKoUgWhDk4uMBMluoqZT"]],[3,-30,[0,"8a+7ErFA5PorCw4xC8vzex"]],[1,-31,[0,"f0y+wlTotMhKl14w7rWWmY"],[5,150,50]]],[2,"67QdY8Ot1J27R4nbCf946j",1,0]],[15,"yes",512,33554432,1,[2],[[10,3,-33,[0,"fayej1KXJGwJKUl1xziMzr"],[[4,"1d2dcZugyBBDYZh4z+IqPN7","agree",1]],[4,4293322470],[4,4294967295],[4,4291348680],[4,3363338360],2,4,5,6,7],[3,-34,[0,"0fODKoIJVPIqQu7q1SnM6X"]],[1,-35,[0,"43K8xQVcFD9rWVLyNWUmFI"],[5,428,76]]],[2,"ecqDyHatNFD5Py1ff7UvU0",1,0],[1,0,-250,0],[1,1.1,1.1,1.1]],[16,"no",512,33554432,1,[4],[[10,3,-36,[0,"37tXBxmstE+aCh/pOCV1gm"],[[4,"1d2dcZugyBBDYZh4z+IqPN7","disAgree",1]],[4,4293322470],[4,4294967295],[4,4291348680],[4,3363338360],4,8,9,10,11],[3,-37,[0,"26hQ0WBsZJbIhxYKkG0YuM"]],[1,-38,[0,"88C1X7a8VJv6TUOSg+DFNa"],[5,150,50]]],[2,"232SgL2ZZMlLMK/nuGpsxq",1,0],[1,0,-325,0]],[7,"yinsi",512,33554432,1,[[11,-40,[0,"d6rIzUyuFPF5HvWwMTMwZj"],[[4,"1d2dcZugyBBDYZh4z+IqPN7","privacyAgreement",1]],[4,4294967295],[4,4292072403],-39],[3,-41,[0,"65MDHWehBKcJkjpsaj0vSk"]],[1,-42,[0,"34onjRBfdGpYnG6ivjsub5"],[5,200,60]]],[2,"69YTFQz/tDcZYwZkF9QT96",1,0],[1,172.026,194.146,0]],[7,"fuwu",512,33554432,1,[[11,-44,[0,"d85fyQiINIo5GYAPPzmKA+"],[[4,"1d2dcZugyBBDYZh4z+IqPN7","userAgreement",1]],[4,4294967295],[4,4292072403],-43],[3,-45,[0,"2d+3OUEJlOVr8zMcDUnqk4"]],[1,-46,[0,"73F3ZcsXxECLC/vtmHs/aY"],[5,200,60]]],[2,"7fcvIYd3VBNZqNmeEav0Yp",1,0],[1,-156.772,153.83,0]],[8,"window",512,33554432,1,[[-47,[3,-48,[0,"8eFhGe9X5HVY2gR/vXNtFU"]],[1,-49,[0,"62sKr4puJC5JAFIG96ls/z"],[5,600,750]]],1,4,4],[2,"73K2bTXc1BxK/ErWjecprt",1,0]],[5,"logo",512,33554432,1,[[-50,[3,-51,[0,"31XiYRjsBF3JbV9COL6Fs1"]],[1,-52,[0,"d613IwWXVIWpIdRrIG81CY"],[5,0,52.92]]],1,4,4],[2,"b16s/KXr9CkbRUeP7YPQAP",1,0],[1,0,340,0]],[5,"title",512,33554432,1,[[-53,[3,-54,[0,"46v4RAsyVN3Lvgc+5cuKbp"]],[1,-55,[0,"15+JAg8GpB0aiyGtwJgJ39"],[5,0,52.92]]],1,4,4],[2,"a8v0tYkt5FKKrbjBlj/zkv",1,0],[1,0,51.876,0]],[5,"Label",512,33554432,2,[[-56,[3,-57,[0,"40ZMaYCYVFgpmSdjn96iXF"]],[1,-58,[0,"81pzOei0dPe5+ynC9mSs5d"],[5,0,63]]],1,4,4],[2,"ecdtJlDJdPtZakWbnmX2j5",1,0],[1,0,5.029,0]],[8,"Label",512,33554432,4,[[-59,[3,-60,[0,"49V+46+9pJcKFsQMthNlQz"]],[1,-61,[0,"2bsC3fh5FCjJRZpJx3lYIS"],[5,0,63]]],1,4,4],[2,"93YP927CVFSp62ygpONkvL",1,0]],[24,"logo<Label>","",38,38,42,0,1,10,[0,"96iTWA9UNCcoGhgE0LGd+z"],[4,4285409592]],[21,"window<Sprite>",1,0,9,[0,"b4MC8dJdBH1IUOsTnMXLS7"]],[27,42,"",30,"SimHei",11,[0,"e4NJ+OpKVMlIOugdi9Bcka"]],[25,"Label<Label>","",40,"SimHei",50,false,0,1,12,[0,"53Da3ILONKDboC77VfeI2N"]],[26,"Label<Label>","",40,"SimHei",50,false,0,13,[0,"fdlkIhoixEgoUK3Z1U1PAR"],[4,4287842906]]],0,[0,10,1,0,0,1,0,0,1,0,11,14,0,12,15,0,13,16,0,14,18,0,15,17,0,16,14,0,0,1,0,-1,3,0,-2,9,0,-3,10,0,-4,11,0,-5,5,0,-6,6,0,-7,7,0,-8,8,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,12,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,-1,13,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,4,7,0,0,7,0,0,7,0,0,7,0,4,8,0,0,8,0,0,8,0,0,8,0,-1,15,0,0,9,0,0,9,0,-1,14,0,0,10,0,0,10,0,-1,16,0,0,11,0,0,11,0,-1,17,0,0,12,0,0,12,0,-1,18,0,0,13,0,0,13,0,17,1,2,5,5,4,5,6,61],[0,0,0,0,0,0,0,0,0,0,0,0,15,15,14,17,18],[1,3,1,3,6,7,8,9,6,7,8,9,1,3,1,1,1],[0,5,0,6,1,1,2,3,1,1,2,3,0,7,0,0,0]],[[{"name":"round_rect_2","rect":{"x":0,"y":0,"width":300,"height":273},"offset":{"x":0,"y":0},"originalSize":{"width":300,"height":273},"rotated":false,"capInsets":[79,79,76,67],"packable":true}],[1],0,[0],[2],[8]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[1],0,[0],[2],[9]],[[[28,"builtin-sprite",[{}],[{"hash":67215139,"name":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"round_rect_origin_1","rect":{"x":0,"y":12,"width":428,"height":76},"offset":{"x":0,"y":-6},"originalSize":{"width":428,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[2],[10]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[1],0,[0],[2],[11]],[[[29,[{}],[{"USE_TEXTURE":true}]]],0,0,[0],[18],[12]]]]
